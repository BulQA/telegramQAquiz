import os
import random
import telebot
import threading
from banners import *
from dotenv import load_dotenv
from questions import questions

from telebot.types import (
    PollAnswer, ReplyKeyboardMarkup,
    KeyboardButton, ReplyKeyboardRemove,
    Poll

)

from config import (
    auto_delete, delete_user_command,
    with_quiz_winners, auto_delete_replies
) 

from db import (
    init_db, add_user_if_new, add_point,
    save_answer, get_user_stats, 
    get_all_user_stats, reset_user_stats
)

load_dotenv()

token = os.getenv("BOT_TOKEN")

if not token:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª –∏ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")

bot = telebot.TeleBot(token)

# ---------------------------
# –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ poll_id
# ---------------------------

correct_answers_dict = {}  # poll_id -> correct_index
wrong_answers = {}  # poll_id: [–æ—à–∏–±—à–∏–µ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏]
poll_results = {} # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@bot.message_handler(commands=['start'])
@delete_user_command(bot, delay=5)
@auto_delete(bot, delay=15)
def start_command(message):
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! ü§ó\n\n"
        f"{commands}\n"
    )
    return bot.send_message(chat_id=message.chat.id, text=text)



@bot.message_handler(commands=['my_score'])
@delete_user_command(bot, delay=5)
@auto_delete(bot, delay=15)
def my_score_command(message):
    user_id = message.from_user.id
    all_stats = get_all_user_stats()
    user_stat = next((stat for stat in all_stats if stat[0] == user_id), None)

    if not user_stat:
        return bot.send_message(message.chat.id, "–í—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∫–≤–∏–∑–∞—Ö üòÖ")

    uid, uname, fname, scores, total_games, correct, wrong, ratio = user_stat
    name = f"@{uname}" if uname else fname

    stats_text = (
        f"üèÜ –û—á–∫–∏: {scores}\n"
        f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {wrong}\n"
        f"üìä % –ü/–ù: {ratio}%"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –±–æ–∫—Å–∞
    formatted_stats = "\n".join("‚îÉ " + line for line in stats_text.split("\n")) + "\n"

    try:
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ –±–∞–Ω–Ω–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
        banner_with_stats = personal_stats_1 + formatted_stats + personal_stats_2
    except NameError as e:
        # Fallback –µ—Å–ª–∏ –±–∞–Ω–Ω–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ personal_stats_1/_2 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
        print(f"–û—à–∏–±–∫–∞ –≤ –±–∞–Ω–Ω–µ—Ä–µ: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ banners.py –Ω–∞ –Ω–∞–ª–∏—á–∏–µ personal_stats_1 –∏ personal_stats_2.")
        banner_with_stats = stats_text  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –±–∞–Ω–Ω–µ—Ä–∞

    return bot.send_message(message.chat.id, banner_with_stats)



@bot.message_handler(commands=['rs'])
@delete_user_command(bot, delay=5)
@auto_delete_replies(bot, delay=15)  # –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
def reset_stats_command(message):
    chat_id = message.chat.id

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))

    bot.send_message(
        chat_id,
        "‚ö† –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?",
        reply_markup=markup
    )

    bot.register_next_step_handler(message, process_reset_confirmation)


@auto_delete_replies(bot, delay=15)
def process_reset_confirmation(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    answer = message.text.strip().lower()

    if answer == "–¥–∞":
        reset_user_stats(user_id)
        bot.send_message(chat_id, "‚úÖ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ –æ–±–Ω—É–ª–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(chat_id, "‚ùå –û–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())



@bot.message_handler(commands=['quiz'])
@delete_user_command(bot, delay=5)
def create_quiz(message):
    if not questions:
        bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã üò±.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    q_text, correct_answer = random.choice(list(questions.items()))
    other_answers = [a for _, a in questions.items() if a != correct_answer]

    num_options = 4
    num_wrong = min(num_options - 1, len(other_answers))
    wrong_answers = random.sample(other_answers, k=num_wrong)

    options = wrong_answers + [correct_answer]
    random.shuffle(options)
    correct_index = options.index(correct_answer)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–≤–∏–∑
    poll_message = bot.send_poll(
        chat_id=message.chat.id,
        question=q_text,
        options=options,
        type='quiz',
        correct_option_id=correct_index,
        is_anonymous=False,
        explanation=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ poll_id
    correct_answers_dict[poll_message.poll.id] = correct_index

    # –¢–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–≤–∏–∑–∞ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
    threading.Timer(
    20.0,
    delete_quiz,
    args=(message.chat.id, poll_message.message_id, poll_message.poll.id)).start()

# ---------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–æ—Å
# ---------------------------

@bot.poll_answer_handler()
def handle_poll_answer(poll_answer: PollAnswer):
    poll_id = poll_answer.poll_id
    user_id = poll_answer.user.id
    username = poll_answer.user.username
    first_name = poll_answer.user.first_name
    option_id = poll_answer.option_ids[0] if poll_answer.option_ids else None

    if option_id is None:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±–æ—Ä–∞

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–æ–≤—ã–π
    add_user_if_new(user_id, username, first_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
    correct_index = correct_answers_dict.get(poll_id)
    if correct_index is not None:
        correct = 1 if option_id == correct_index else 0
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_answer(poll_id, user_id, correct)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ poll_results –¥–ª—è handle_closed_poll
        if poll_id not in poll_results:
            poll_results[poll_id] = []
        poll_results[poll_id].append((user_id, username, first_name, correct))


@with_quiz_winners
@auto_delete(bot, delay=15)
def delete_quiz(chat_id: int, message_id: int, poll_id: str, winners_text: str = None):
    try:
        bot.stop_poll(chat_id, message_id)
        bot.delete_message(chat_id, message_id)

        if winners_text:
            text = f"{winners}\nüéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winners_text}!\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ : /quiz"
            return bot.send_message(chat_id, text)
        else:
            text = f"<pre>{fail_answer}</pre>\n–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ üòÖ.\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ : /quiz"
            return bot.send_message(chat_id, text, parse_mode='HTML')

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–≤–∏–∑–∞:", e)


# ---------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–≤–∏–∑–µ
# ---------------------------

@auto_delete(bot, delay=10)
@bot.poll_handler(func=lambda p: p.is_closed)
def handle_closed_poll(poll: Poll):
    results = poll_results.get(poll.id, [])
    correct_index = correct_answers_dict.get(poll.id)

    for user_id, username, first_name, correct in results:
        name = f"@{username}" if username else first_name
        if correct:
            add_point(user_id)
            # –£–±—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è; –∏—Ç–æ–≥ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ
        else:
            pass  # –ü—É—Å—Ç–æ–π –±–ª–æ–∫ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤


# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
# ---------------------------

@bot.message_handler(commands=['top'])
@delete_user_command(bot, delay=5)
@auto_delete(bot, delay=10)
def show_top(message):
    user_id = message.from_user.id
    headers = ['‚Ññ', '–ò–º—è', '–û—á–∫–∏', '–ò–≥—Ä', '–ü/–ù%']

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    all_users = get_user_stats()

    table_data = []
    user_row = None

    for rank, uid, username, first_name, scores, total_games, correct, wrong, percent in all_users:
        display_name = f"@{username}" if username else first_name or "‚Äî"
        row = [str(rank), display_name, str(scores), str(total_games), f"{percent}%"]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-7
        if rank <= 7:
            table_data.append(row)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–µ —Ç–æ–ø–∞
        if uid == user_id and rank > 7:
            user_row = row

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–µ —Ç–æ–ø–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    if user_row:
        table_data.append(['‚Äî'] * len(headers))
        table_data.append(user_row)

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    col_widths = [
        max(len(str(headers[i])), max(len(str(row[i])) for row in table_data))
        for i in range(len(headers))
    ]

    def format_row(row):
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |
        return "|" + "|".join(f" {str(row[i]):<{col_widths[i]}} " for i in range(len(row))) + "|"

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
    sep_line = "+" + "+".join("-" * (w + 2) for w in col_widths) + "+"

    lines = [sep_line, format_row(headers), sep_line] + \
            [format_row(row) for row in table_data] + [sep_line]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–≥–æ–º <pre> –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    return bot.send_message(
        message.chat.id,
        f"<pre>{chr(10).join(lines)}</pre>",
        parse_mode='HTML'
    )


# ---------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ---------------------------

if __name__ == '__main__':
    init_db()  # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    bot.polling()